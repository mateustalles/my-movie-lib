{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","required","placeholder","id","type","value","onChange","event","updateMovie","target","htmlFor","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","defaultProps","MovieCard","alt","src","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","EditMovie","status","shouldRedirect","match","params","movieAPI","then","updatedMovie","map","FormComponent","MovieDetails","redirect","byebyeMovie","filter","length","defaultTypes","MovieList","key","NewMovie","newMovie","movieData","nextId","NotFound","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3d42b12.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            required\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={title}\n            onChange={(event) => this.updateMovie('title', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_title\">Título</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            required\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            className=\"validate\"\n            value={subtitle}\n            onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_subtitle\">Subtítulo</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            required\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            className=\"validate\"\n            value={imagePath}\n            onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_image\">Imagem</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <textarea\n            required\n            id=\"movie_storyline\"\n            className=\"materialize-textarea\"\n            value={storyline}\n            onChange={(event) => this.updateMovie('storyline', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_storyline\">Sinopse</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div className=\"row col\">\n        <label htmlFor=\"movie_genre\">Genre Select</label>\n        <select\n          required\n          className=\"browser-default\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"input-field col s12\">\n          <input\n            required\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            className=\"form-control\"\n            step={0.1}\n            min={0}\n            max={5}\n            value={rating || ''}\n            onChange={(event) => this.updateMovie('rating', event.target.value)}\n          />\n          <label className=\"active\" htmlFor=\"movie_rating\">Avaliação</label>\n        </div>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div className=\"row\">\n        <button\n          className=\"btn waves-effect waves-light\"\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"movie-form\">\n        <div className=\"row\">\n          <form className=\"col s12\">\n            {this.renderTitleInput()}\n            {this.renderSubtitleInput()}\n            {this.renderImagePathInput()}\n            {this.renderStorylineInput()}\n            {this.renderGenreSelection()}\n            {this.renderRatingInput()}\n            {this.renderSubmitButton()}\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieForm;\n\nMovieForm.defaultProps = {\n  movie: {\n    title: '',\n    subtitle: '',\n    storyline: '',\n    imagePath: '',\n    id: 0,\n  },\n};\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, imagePath } = movie;\n    return (\n      <div className=\"row\">\n        <div className=\"col s12 m7\">\n          <div className=\"card movie-card\">\n            <div className=\"card-image\">\n              <img alt=\"Movie Cover\" className=\"movie-card-image\" src={`${imagePath}`} />\n              <span className=\"card-title\">{title}</span>\n            </div>\n            <div className=\"card-content\">\n              <p>{storyline}</p>\n            </div>\n            <div className=\"card-action\">\n              <Link to={`/movies/${movie.id}/`}>\n                VER DETALHES\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: [],\n      status: 'loading',\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n    const { id } = match.params;\n    movieAPI.getMovie(id)\n      .then((movie) => this.setState({ movie, status: '' }));\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n    );\n  }\n}\n\nexport default EditMovie;\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: [],\n      redirect: false,\n    };\n    this.byebyeMovie = this.byebyeMovie.bind(this);\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n    const { id } = match.params;\n    movieAPI.getMovie(id)\n      .then((movie) => this.setState({ movie }));\n  }\n\n  byebyeMovie() {\n    const { match } = this.props;\n    const { id } = match.params;\n    movieAPI.deleteMovie(id)\n      .then(this.setState({ redirect: true }));\n  }\n\n  render() {\n    const { movie, redirect } = this.state;\n    const { match } = this.props;\n    const { id } = match.params;\n\n    if (movie.length === 0) return <Loading />;\n\n    if (redirect) return <Redirect to=\"/\" />;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col s12 m7\">\n          <div className=\"card\">\n            <FormComponent movie={movie} id={id} />\n            <div className=\"card-action\">\n              <Link to={`/movies/${id}/edit/`}>\n              EDITAR\n              </Link>\n              <Link to=\"/\">\n              VOLTAR\n              </Link>\n              <Link to={{ state: { movie } }} onClick={this.byebyeMovie}>\n              DELETAR CARTÃO\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction FormComponent(props) {\n  const { movie } = props;\n  const {\n    title, storyline, imagePath, genre, rating, subtitle,\n  } = movie;\n\n  return (\n    <div>\n      <div className=\"card-image\">\n        <img alt=\"Movie Cover\" src={imagePath} />\n        <span className=\"card-title\">{title}</span>\n      </div>\n      <div className=\"card-content\">\n        <p>{`Subtitle: ${subtitle}`}</p>\n        <p>{`Storyline: ${storyline}`}</p>\n        <p>{`Genre: ${genre}`}</p>\n        <p>{`Rating: ${rating}`}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nFormComponent.defaultTypes = {\n  movie: {\n    title: '',\n    subtitle: '',\n    storyline: '',\n    imagePath: '',\n    genre: '',\n    rating: '',\n    id: 0,\n  },\n};\n\nFormComponent.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    genre: PropTypes.string,\n    rating: PropTypes.any,\n    id: PropTypes.number,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MovieCard, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies()\n      .then((movies) => this.setState((state) => (\n        { movies: [...state.movies, movies] })));\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    if (movies.length === 0) return <Loading />;\n\n    return (\n      <>\n        <div className=\"row movie-list\">\n          <div>\n            <Link className=\"add-movie-button\" to=\"../movies/new/\">\n                ADICIONAR CARTÃO\n            </Link>\n          </div>\n          <div className=\"movie-list\">\n            {movies[0].map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie)\n      .then(this.setState({ redirect: true }));\n  }\n\n  render() {\n    const { redirect } = this.state;\n\n    if (redirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <MovieForm onSubmit={this.handleSubmit} />\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"not-found header\">Página não encontrada</div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport {\n  MovieList, NewMovie, EditMovie, NotFound, MovieDetails,\n} from './pages';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/movies/:id/edit/\" component={EditMovie} />\n        <Route path=\"/movies/new/\" component={NewMovie} />\n        <Route path=\"/movies/:id/\" component={MovieDetails} />\n        <Route path=\"/\" exact component={MovieList} />\n        <Route path=\"*\" component={NotFound} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}